name: Test change

on:
  push:
    branches-ignore:
      - gh-pages
  release:
    types: [created]

jobs:
  linux:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04]
        python-version: ['cp37-cp37m', 'cp38-cp38']

    steps:
    - name: Checkout repo
      uses: actions/checkout@v1
      with:
        submodules: true
    - name: Build linux wheel ${{ matrix.python-version }}
      uses: "./"
      with:
        args: "make-wheel ${{ matrix.python-version}}"
    - name: Test wheel
      uses: "./"
      with:
        args: "test-wheel ${{ matrix.python-version}}"
    - name: "Upload wheel"
      uses: actions/upload-artifact@v1
      with:
        name: linux-${{ matrix.python-version }}
        path: wheelhouse

  osx:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macOS-latest]
        python-version: ['3.7.x', '3.8.x']
    steps:
    - name: Checkout repo
      uses: actions/checkout@v1
      with:
        submodules: true
    - name: Select Xcode
      run: sudo xcode-select --switch /Applications/Xcode_11.1.app/Contents/Developer
    - name: Setup python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
        architecture: 'x64'
    - name: Build Deps
      run: pip3 install -r build_requirements.txt
    - name: Make wheels
      run: pip3 wheel . -w wheelhouse/
    - name: "Install wheel"
      run: pip3 install wheelhouse/pytubes*.whl
    - name: "Test wheel"
      run: |
        pip3 install numpy pandas pytest
        pip3 install pyarrow || true
        pytest test
    - name: Make export dir
      run: mkdir export && cp wheelhouse/pytubes*.whl export/
    - name: "Upload wheel"
      uses: actions/upload-artifact@v1
      with:
        name: macos-${{ matrix.python-version }}
        path: export
    - name: "Build docs"
      if: matrix.python-version == '3.8.x'
      run: cd docs && make html
    - name: "Upload docs"
      if: matrix.python-version == '3.8.x'
      uses: actions/upload-artifact@v1
      with:
        name: docs
        path: docs/_build/html
    - name: "Build sdist"
      if: matrix.python-version == '3.7.x'
      run: python setup.py sdist
    - name: "Upload sdist"
      if: matrix.python-version == '3.7.x'
      uses: actions/upload-artifact@v1
      with:
        name: sdist
        path: dist

  win:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.7.x', '3.8.x']
    steps:
    - name: Checkout repo
      uses: actions/checkout@v1
      with:
        submodules: true
    - name: Setup python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
        architecture: 'x64'
    - name: Build Deps
      run: pip3 install -r build_requirements.txt
    - name: Make wheels
      run: pip3 wheel . -w wheelhouse/
    - name: "Install wheel"
      run: FOR %%W IN (wheelhouse\pytubes*.whl) DO CALL pip3 install %%W
      shell: cmd
    - name: "Test wheel"
      run: |
        pip3 install numpy pyarrow pandas pytest
        pytest test
    - name: Make export dir
      run: |
        mkdir export
        FOR %%W IN (wheelhouse\pytubes*.whl) DO CALL copy %%W export\
      shell: cmd
    - name: "Upload wheel"
      uses: actions/upload-artifact@v1
      with:
        name: win-${{ matrix.python-version }}
        path: export

  upload-release-assets-wheels:
    if: github.event_name == 'release'
    needs: [osx, linux, win]
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        file: [macos-3.7.x,
               macos-3.8.x,
               win-3.8.x,
               win-3.7.x,
               linux-cp37-cp37m,
               linux-cp38-cp38,
              ]
    steps:
      - name: "Download wheel"
        uses: actions/download-artifact@master
        with:
          name: ${{ matrix.file }}
          path: wh-${{ matrix.file }}/
      - name: "Find filename"
        id: filename
        run: cd wh-${{ matrix.file }} && echo "::set-output name=file::$(ls -1 *.whl|head -n1)"
      - name: "Upload release artifact"
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: wh-${{ matrix.file }}/${{ steps.filename.outputs.file }}
          asset_name: ${{ steps.filename.outputs.file }}
          asset_content_type: application/zip
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.pypi_password }}
          packages_dir: wh-${{matrix.file}}/


  upload-release-assets-sdist-docs:
    if: github.event_name == 'release'
    runs-on: ubuntu-18.04
    needs: [osx, linux, win]
    steps:
      - uses: actions/download-artifact@master
        with:
          name: docs
          path: docs/
      - name: Create docs package
        run: tar czf docs.tgz docs/
      - name: Upload release artifacts
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./docs.tgz
          asset_name: docs.tgz
          asset_content_type: application/gzip
      - name: Download sdist artifact
        uses: actions/download-artifact@master
        with:
          name: sdist
          path: sdist/
      - name: Find the exact name of the sdist file
        id: sdist_filename
        run: cd sdist/ && echo "::set-output name=file::$(ls -1 pytubes*.tar.gz|head -n1)"
      - name: Upload sdist file
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: sdist/${{ steps.sdist_filename.outputs.file }}
          asset_name: ${{ steps.sdist_filename.outputs.file }}
          asset_content_type: application/gzip
      - name: Publish sdist to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.pypi_password }}
          packages_dir: sdist/
      - name: Get python 3 available for docs scripts
        uses: actions/setup-python@v1
        with:
          python-version: '3.x'
          architecture: 'x64'
      - name: Checkout GH Pages branch
        uses: actions/checkout@v2
        with:
          ref: gh-pages
          path: gh-pages
          token: ${{ secrets.DOCS_PUSH }}
      - name: Set up git
        run: |
          git config --global user.email "pytubes@sta.gg"
          git config --global user.name "Pytubes bot"
      - name: Add current docs & update indexes
        run: cd gh-pages && python3 add-version.py ../docs && python3 update-versions.py
      - name: Stage, commit, and push gh-pages
        run: |
          cd gh-pages
          git add -A
          git commit -m "Add docs for release ${{ github.event.release.tag_name}}"
          git push